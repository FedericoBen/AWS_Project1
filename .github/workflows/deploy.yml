name: Deploy AWS SAM Application

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  AWS_REGION: us-east-1 # Cambia esto si usas otra regi√≥n
  S3_BUCKET: S3project1 # Definir como secreto en GitHub
  STACK_NAME: project1 # Definir como secreto en GitHub
  SAM_TEMPLATE: template.yml
  PIPELINE_EXECUTION_ROLE: arn:aws:iam::532353884571:role/PIPELINE_EXECUTION_ROLE

jobs:
  deploy-dev:
    if: github.event_name == 'push' && startsWith(github.ref,'refs/heads/develop')
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout

    steps:
      # Step 1: Checkout the code
      - name: STEP1-Checkout code
        uses: actions/checkout@v3

      # Step 2: Configurar SAM
      - name: STEP2-Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      #Step 3: hacer el build de SAM a ClodFormation
      - run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: STEP3-Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Step 5: Crear el bucket S3 si no existe
      - name: STEP4-Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET }} --region ${{ env.AWS_REGION }} ${ { env.AWS_REGION } == 'us-east-1' && echo 'Bucket created'|| echo "Bucket already exists"


      # Step 4: Package Lambda code into a zip file
      - name: STEP4-Package Lambda
        run: |
          touch placeholder.txt
          zip -r lambdaUsers.zip placeholder.txt

      # # Step 5: STEP5-Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 6: Upload Lambda package to S3
      - name: STEP6-Upload Lambda package to S3
        run: |
          aws s3 cp lambdaUsers.zip s3://${{ env.S3_BUCKET }}/lambdaUsers.zip

      # Step 7: Package SAM template
      - name: STEP7-Package SAM Template
        run: |
          aws cloudformation package \
            --template-file template.yml \
            --s3-bucket ${{ env.S3_BUCKET }} \
            --output-template-file packaged-template.yml

      # Step 8: Deploy SAM stack
      - name: STEP8-Deploy SAM Application
        run: |
          aws cloudformation deploy \
            --template-file packaged-template.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides AppEnv=dev LambdaCodeKey=lambdaUsers.zip

      # Step 9: Verify the deployment
      - name: STEP9-Verify deployment
        run: |
          aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }}
